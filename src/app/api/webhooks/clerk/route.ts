// API route api/webooks/clerk listens to this webhook event to process

// Clerk endpoint for this POST req: https://NGROK_GENERATED_URL/api/webhooks/clerk 
//   - (this dev url generated by ngrok and changes every time you restart it)
// TODO: replace ngrok url with trakly domain name when in prod

import { Webhook } from 'svix'
import { headers } from 'next/headers'
import { WebhookEvent } from '@clerk/nextjs/server'
// database
import { Pool } from 'pg';

// PostgreSQL database connection
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT ? parseInt(process.env.DB_PORT, 10) : undefined,
});

// Clerk guide: https://clerk.com/docs/integrations/webhooks/sync-data#sync-clerk-data-to-your-application-with-webhooks
export async function POST(req: Request) {

  // You can find this in the Clerk Dashboard -> Webhooks -> choose the endpoint
  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOK_SECRET

  if (!WEBHOOK_SECRET) {
    throw new Error('Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local')
  }

  // Get the headers
  const headerPayload = headers();
  const svix_id = headerPayload.get("svix-id");
  const svix_timestamp = headerPayload.get("svix-timestamp");
  const svix_signature = headerPayload.get("svix-signature");

  // If there are no headers, error out
  if (!svix_id || !svix_timestamp || !svix_signature) {
    return new Response('Error occured -- no svix headers', {
      status: 400
    })
  }

  // Get the body
  const payload = await req.json()
  const body = JSON.stringify(payload);

  // Create a new Svix instance with your secret.
  const wh = new Webhook(WEBHOOK_SECRET);

  let evt: WebhookEvent

  // Verify the payload with the headers
  try {
    evt = wh.verify(body, {
      "svix-id": svix_id,
      "svix-timestamp": svix_timestamp,
      "svix-signature": svix_signature,
    }) as WebhookEvent
  } catch (err) {
    console.error('Error verifying webhook:', err);
    return new Response('Error occured', {
      status: 400
    })
  }

  // sync user to PostgreSQL database 
  const eventType = evt.type;
  if (eventType === 'user.created' || eventType === 'user.updated'){
    const {id, email_addresses, first_name, last_name, image_url} = evt.data;

    // extract user data from Clerk auth to send to Postgresql db
    const email = email_addresses[0]?.email_address;
    const firstName = first_name || '';
    const lastName = last_name || '';
    const imageUrl = image_url || '';


    if(!id || !email_addresses){
        return new Response('Error occurred - missing data'), {
            status: 400
        }
    }

    // send user data from Clerk auth to PostgreSQL db 
    try {
      // note: NOW() is generating created_at timestamp
      const query = `
        INSERT INTO users (provider_id, email, name, created_at, provider, image_url)
        VALUES ($1, $2, $3, NOW(), $4, $5)
        ON CONFLICT (provider_id) 
        DO UPDATE SET email = EXCLUDED.email, name = EXCLUDED.name, updated_at = NOW(), image_url = EXCLUDED.image_url;
      `;

      await pool.query(query, [id, email, `${firstName} ${lastName}`, 'clerk', imageUrl]);

      return new Response('User synced successfully', { status: 200 });

    } catch (error) {
      console.error('Error syncing user:', error);
      return new Response('Internal Server Error', {
        status: 500,
      });
    }

  }
  // if wh successful, respond with 200 code
  return new Response('Webhook successful - user synced to database', { status: 200 })
}